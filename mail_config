#create bucket
gsutil mb gs://open_house


mkdir ~/gcb_email
cd ~/gcb_email

config.json
{
   "MAILGUN_API_KEY":"key-0d215d30f7482a6b0df83b82a3418446",
   "MAILGUN_DOMAIN":"sandbox9fe7dfa136454bd18680b78ba803d3e8.mailgun.org",
   "MAILGUN_FROM":"iliag@sela.co.il",
   "MAILGUN_TO":"iliag@sela.co.il"
}

package.json
{
  "name": "google-container-email",
  "version": "0.0.1",
  "description": "Email integration for Google Cloud Container Builder, using Google Cloud Functions",
  "main": "index.js",
  "dependencies": {
    "humanize-duration": "3.10.0",
    "mailgun-js": "~0.11.2"
  },
  "devDependencies": {
    "async": "^2.1.5",
    "mocha": "3.2.0",
    "should": "11.2.1"
  }
}

index.js

const Mailgun = require('mailgun-js');
const humanizeDuration = require('humanize-duration');
const config = require('./config.json');
 
module.exports.mailgun = new Mailgun({
  apiKey: config.MAILGUN_API_KEY,
  domain: config.MAILGUN_DOMAIN,
});
 
// subscribe is the main function called by Cloud Functions.
module.exports.subscribe = (event, callback) => {
  const build = module.exports.eventToBuild(event.data.data);
 
  // Skip if the current status is not in the status list.
  const status = ['FAILURE', 'INTERNAL_ERROR', 'TIMEOUT'];
  if (status.indexOf(build.status) === -1) {
    return callback();
  }
 
  // Send email.
  const message = module.exports.createEmail(build);
  module.exports.mailgun.messages().send(message, callback);
};
// eventToBuild transforms pubsub event message to a build object.
module.exports.eventToBuild = (data) => {
  return JSON.parse(new Buffer(data, 'base64').toString());
}
// createEmail create an email message from a build object.
module.exports.createEmail = (build) => {
  let duration = humanizeDuration(new Date(build.finishTime) - new Date(build.startTime));
  let content = `Build ${build.id} finished with status ${build.status}` + `\n` + `${build.logUrl}`;
  let message = {
    from: config.MAILGUN_FROM,
    to: config.MAILGUN_TO,
    subject: `Build ${build.id} finished`,
    text: content
  };
  return message
}


#Upload the files to the bucket as a cloud function
gcloud beta functions deploy subscribe --stage-bucket gs://open_house --trigger-topic cloud-builds
